pool:
  vmImage: 'Ubuntu 16.04'

variables:
  buildConfiguration: 'Release'
  codeCoverageThreshold: '0'
  projectName: 'HiKidGo.ClassroomDirector.Web'

steps:
- task: UseDotNet@2
  displayName: 'Install .Net Core SDK'
  inputs:
    packageType: sdk
    version: '3.1.401'

- script: |
    sed -i 's/PERSONAL_ACCESS_TOKEN/$(system.AccessToken)/g' build_nuget.config
    dotnet restore --configfile build_nuget.config
    dotnet build --configuration $(buildConfiguration)
    dotnet publish $(projectName)/$(projectName).csproj --configuration $(buildConfiguration) --runtime win-x64
    
    rm "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/web.config"
    rm "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/appsettings.json"
    rm "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/nlog.config"
    mv "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/appsettings.environment.json" "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/appsettings.json"
    mv "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/nlog.environment.config" "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/nlog.config"
    mv "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/web.environment.config" "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/web.config"
    cp -r "$(projectName)/bin/Release/netcoreapp3.1/win-x64/publish/." "$(Build.ArtifactStagingDirectory)"
    
  displayName: 'Build'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '**/coverage.cobertura.xml'
    failIfCoverageEmpty: true

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'